/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 ./MainCharacter.glb -o ./Npc.jsx 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { AnimationMixer } from 'three'

export function Npc({groupMapName, position, colorValue, ...props}) {
  const group = useRef()
  const { scene, materials, animations } = useGLTF('/assets/models/character/MainCharacter.glb')

  // 씬을 복제하여 상태 변화로부터 안전하게 만듦
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])

  // 씬의 모든 노드를 얻음 (모델의 각 파트를 개별적으로 제어 가능)
  const objectMap = useGraph(clone)
  const nodes = objectMap.nodes

  // AnimationMixer 생성 (애니메이션을 제어하는 클래스)
  const mixer = useMemo(() => new AnimationMixer(clone), [clone])

  // 현재 실행 중인 애니메이션 상태를 저장하는 상태 변수
  const [animation, setAnimation] = useState('Stand')

  const actions = useMemo(() => {
      return animations.reduce((acc, clip) => {
          acc[clip.name] = mixer.clipAction(clip) // 애니메이션 클립에 대한 액션 생성
          return acc
      }, {})
  }, [animations, mixer])

  useEffect(() => {
      if (actions[animation]) {
          actions[animation].reset().fadeIn(0.1).play() // 선택된 애니메이션 재생
      }
      return () => {
          if (actions[animation]) {
              actions[animation].fadeOut(0.1)
          }
      }
  }, [animation, actions])

  return (
    <group ref={group} position={position} {...props}>
      <group name="Scene">
        <group name="MainCharacter" scale={1.2}>
          <primitive object={nodes.Hip} />
          <primitive object={nodes.Thigh_L} />
          <primitive object={nodes.Thigh_R} />
          <group name="MainCharacterObject">
            <skinnedMesh name="평면001" geometry={nodes.평면001.geometry} material={materials['colorBlack.002']} skeleton={nodes.평면001.skeleton} />
            <skinnedMesh name="평면001_1" geometry={nodes.평면001_1.geometry} skeleton={nodes.평면001_1.skeleton} >
              <meshStandardMaterial color={colorValue} />
            </skinnedMesh>
            <skinnedMesh name="평면001_2" geometry={nodes.평면001_2.geometry} material={materials['colorNose.002']} skeleton={nodes.평면001_2.skeleton} />
            <skinnedMesh name="평면001_3" geometry={nodes.평면001_3.geometry} material={materials['colorBeige.002']} skeleton={nodes.평면001_3.skeleton} />
            <skinnedMesh name="평면001_4" geometry={nodes.평면001_4.geometry} material={materials['colorBrown.001']} skeleton={nodes.평면001_4.skeleton} />
            <skinnedMesh name="평면001_5" geometry={nodes.평면001_5.geometry} material={materials['colorGreen.001']} skeleton={nodes.평면001_5.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/assets/models/character/MainCharacter.glb')
